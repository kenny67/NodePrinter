"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
var axios_1 = __importDefault(require("axios"));
var config_1 = require("./config");
var business_types_1 = require("./business_types");
var types_1 = require("./types");
var Client = /** @class */ (function () {
    function Client(_user) {
        this._user = _user;
    }
    Client.prototype.bindPrinters = function (param) {
        return __awaiter(this, void 0, void 0, function () {
            var baseRequest, printerContent, bindPrinterResponse, bindResultData, successfulResults, failedResults;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!param.bindPrinterParams || !param.bindPrinterParams.length) {
                            throw (0, business_types_1.apiError)(business_types_1.ApiErrorCode.CLIENT_INVALID_ARGUMENT, 'null or empty bindPrinterParams');
                        }
                        baseRequest = this._prepareRequest(types_1.ApiName.BIND_PRINTERS);
                        printerContent = param.bindPrinterParams.reduce(function (accu, curr) { return "".concat(accu, "\n").concat(curr.sn).concat(curr.model ? '#' + curr.model : '').concat(curr.alias ? '#' + curr.alias : ''); }, '').substring(1);
                        return [4 /*yield*/, this._sendRequest(__assign(__assign({}, baseRequest), { printerContent: printerContent }))];
                    case 1:
                        bindPrinterResponse = _a.sent();
                        this._validateCommonResponse(bindPrinterResponse);
                        bindResultData = bindPrinterResponse.data;
                        successfulResults = bindResultData.ok.map(function (data) { return _this._parseBindResult(data); });
                        failedResults = bindResultData.no.map(function (data) { return _this._parseFailedResult(data); });
                        return [2 /*return*/, {
                                successfullyBindedPrinters: successfulResults,
                                failedBindedPrinters: failedResults,
                            }];
                }
            });
        });
    };
    Client.prototype._parseBindResult = function (result) {
        var splitted = result.split('#');
        var _a = __read([splitted[0], splitted[1]], 2), sn = _a[0], model = _a[1];
        var alias = undefined;
        if (splitted.length == 3) {
            alias = splitted[2];
        }
        return { sn: sn, model: model, alias: alias };
    };
    Client.prototype._parseFailedResult = function (result) {
        var partial = this._parseBindResult(result);
        if (partial.alias) {
            // extract err
            var _a = __read(this._extractErrorMessage(partial.alias), 2), alias = _a[0], errorMessage_1 = _a[1];
            return __assign(__assign({}, partial), { alias: alias, failureReason: errorMessage_1 });
        }
        var _b = __read(this._extractErrorMessage(partial.model), 2), model = _b[0], errorMessage = _b[1];
        return __assign(__assign({}, partial), { model: model, failureReason: errorMessage });
    };
    Client.prototype._extractErrorMessage = function (textWithErrorMessage) {
        var splitted = textWithErrorMessage.split('(error:');
        return [splitted[0].trim(), splitted[1].substring(0, splitted[1].length - 1).trim()];
    };
    Client.prototype.print = function (param) {
        return __awaiter(this, void 0, void 0, function () {
            var baseRequest, printResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!param.sn || !param.content) {
                            throw (0, business_types_1.apiError)(business_types_1.ApiErrorCode.CLIENT_INVALID_ARGUMENT, 'missing serial number or print content');
                        }
                        if (param.times && (param.times < 0 || param.times > 10)) {
                            throw (0, business_types_1.apiError)(business_types_1.ApiErrorCode.CLIENT_INVALID_ARGUMENT, "print times can't be less than 0 or larger than 10");
                        }
                        baseRequest = this._prepareRequest(types_1.ApiName.PRINT);
                        return [4 /*yield*/, this._sendRequest(__assign(__assign({}, baseRequest), param))];
                    case 1:
                        printResponse = _a.sent();
                        this._validateCommonResponse(printResponse);
                        return [2 /*return*/, printResponse.data];
                }
            });
        });
    };
    Client.prototype.unbindPrinters = function (param) {
        return __awaiter(this, void 0, void 0, function () {
            var baseRequest, snlist, unbindResponse, unbindResultData, successfulUnbindResults, failedUnbindResults;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!param.snList || !param.snList.length) {
                            throw (0, business_types_1.apiError)(business_types_1.ApiErrorCode.CLIENT_INVALID_ARGUMENT, 'null or empty snList');
                        }
                        baseRequest = this._prepareRequest(types_1.ApiName.UNBIND_PRINTERS);
                        snlist = __spreadArray([], __read(new Set(param.snList)), false).reduce(function (accu, curr) { return "".concat(accu, "&").concat(curr); }, '').substring(1);
                        return [4 /*yield*/, this._sendRequest(__assign(__assign({}, baseRequest), { snlist: snlist }))];
                    case 1:
                        unbindResponse = _a.sent();
                        this._validateCommonResponse(unbindResponse);
                        unbindResultData = unbindResponse.data;
                        successfulUnbindResults = unbindResultData.ok.map(function (sn) { return ({ sn: _this._parseUnbindResult(sn)[0] }); });
                        failedUnbindResults = unbindResultData.no.map(function (data) { return _this._parseFailedUnbindResult(data); });
                        return [2 /*return*/, { successfullyUnBindedPrinters: successfulUnbindResults, failedUnBindedPrinters: failedUnbindResults }];
                }
            });
        });
    };
    Client.prototype._parseUnbindResult = function (result) {
        return result.split(' ').map(function (res) { return res.trim(); });
    };
    Client.prototype._parseFailedUnbindResult = function (result) {
        var splitted = this._parseUnbindResult(result);
        return { sn: splitted[0], failureReason: result.substring(splitted[0].length) };
    };
    Client.prototype.queryTaskPrintState = function (taskId) {
        return __awaiter(this, void 0, void 0, function () {
            var baseRequest, taskStateResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!taskId) {
                            throw (0, business_types_1.apiError)(business_types_1.ApiErrorCode.CLIENT_INVALID_ARGUMENT, 'null or empty task id');
                        }
                        baseRequest = this._prepareRequest(types_1.ApiName.TASK_STATUS);
                        return [4 /*yield*/, this._sendRequest(__assign(__assign({}, baseRequest), { orderid: taskId }))];
                    case 1:
                        taskStateResponse = _a.sent();
                        this._validateCommonResponse(taskStateResponse);
                        return [2 /*return*/, taskStateResponse.data ? types_1.TaskPrintState.PRINTED : types_1.TaskPrintState.NOT_PRINTED];
                }
            });
        });
    };
    Client.prototype.queryPrinterStatus = function (printerSN) {
        return __awaiter(this, void 0, void 0, function () {
            var baseRequest, printerStatusResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!printerSN) {
                            throw (0, business_types_1.apiError)(business_types_1.ApiErrorCode.CLIENT_INVALID_ARGUMENT, 'null or empty printer serial number');
                        }
                        baseRequest = this._prepareRequest(types_1.ApiName.PRINTER_STATUS);
                        return [4 /*yield*/, this._sendRequest(__assign(__assign({}, baseRequest), { sn: printerSN }))];
                    case 1:
                        printerStatusResponse = _a.sent();
                        this._validateCommonResponse(printerStatusResponse);
                        return [2 /*return*/, printerStatusResponse.data];
                }
            });
        });
    };
    Client.prototype.queryPrinterList = function (sn) {
        return __awaiter(this, void 0, void 0, function () {
            var baseRequest, printerListResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        baseRequest = this._prepareRequest(types_1.ApiName.QUERY_PRINTERS);
                        return [4 /*yield*/, this._sendRequest(__assign(__assign({}, baseRequest), { sn: sn }))];
                    case 1:
                        printerListResponse = _a.sent();
                        this._validateCommonResponse(printerListResponse);
                        return [2 /*return*/, printerListResponse.data];
                }
            });
        });
    };
    Client.prototype.queryPrintTasks = function (request) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var maxReferenceDate, limit, sn, baseRequest, queryPrintTasksResponse, rawResult, rawTasks, tasks, nextReferenceTime;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        maxReferenceDate = (_a = request === null || request === void 0 ? void 0 : request.maxReferenceDate) !== null && _a !== void 0 ? _a : new Date();
                        limit = (_b = request === null || request === void 0 ? void 0 : request.limit) !== null && _b !== void 0 ? _b : 20;
                        sn = (_c = request === null || request === void 0 ? void 0 : request.printerSn) !== null && _c !== void 0 ? _c : '';
                        baseRequest = this._prepareRequest(types_1.ApiName.QUERY_TASKS);
                        return [4 /*yield*/, this._sendRequest(__assign(__assign({}, baseRequest), { maxReferenceTime: maxReferenceDate.toISOString(), limit: limit, sn: sn }))];
                    case 1:
                        queryPrintTasksResponse = _d.sent();
                        this._validateCommonResponse(queryPrintTasksResponse);
                        rawResult = queryPrintTasksResponse.data;
                        rawTasks = rawResult.tasks;
                        tasks = rawTasks.map(this._mapRawTaskToBisTask);
                        nextReferenceTime = rawResult.nextReferenceTime ? new Date(rawResult.nextReferenceTime) : undefined;
                        return [2 /*return*/, { tasks: tasks, nextReferenceTime: nextReferenceTime }];
                }
            });
        });
    };
    Client.prototype._mapRawTaskToBisTask = function (task) {
        var bizTask = {
            id: task.id,
            printerSn: task.printerSn,
            createdAt: new Date(task.createdAt),
            state: task.state === 0 ? types_1.TaskPrintState.NOT_PRINTED : types_1.TaskPrintState.PRINTED,
            expiredAt: undefined,
        };
        !!task.expiredAt && (bizTask.expiredAt = new Date(task.expiredAt));
        return bizTask;
    };
    Client.prototype.clearPendingTasks = function (sn) {
        return __awaiter(this, void 0, void 0, function () {
            var baseRequest, clearPendingTasksResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        baseRequest = this._prepareRequest(types_1.ApiName.CLEAR_PENDING_TASKS);
                        return [4 /*yield*/, this._sendRequest(__assign(__assign({}, baseRequest), { sn: sn }))];
                    case 1:
                        clearPendingTasksResponse = _a.sent();
                        this._validateCommonResponse(clearPendingTasksResponse);
                        return [2 /*return*/, clearPendingTasksResponse.data];
                }
            });
        });
    };
    Client.prototype._prepareRequest = function (apiName) {
        var stime = Math.floor(new Date().getTime() / 1000) + '';
        return {
            user: this._user.user,
            stime: stime,
            sig: this._user.getSignature(stime),
            apiname: apiName,
        };
    };
    Client.prototype._validateCommonResponse = function (response) {
        var _a, _b, _c, _d, _e;
        switch (response.ret) {
            case types_1.RetCode.INVALID_SIG_OR_TIMESTAMP:
                throw (0, business_types_1.apiError)(business_types_1.ApiErrorCode.RESPONSE_ERROR, (_a = 'invalid signature or timestamp ' + response.msg) !== null && _a !== void 0 ? _a : '');
            case types_1.RetCode.EMPTY_REQUEST:
                throw (0, business_types_1.apiError)(business_types_1.ApiErrorCode.RESPONSE_ERROR, (_b = 'empty request ' + response.msg) !== null && _b !== void 0 ? _b : '');
            case types_1.RetCode.INVALID_REQUEST:
                throw (0, business_types_1.apiError)(business_types_1.ApiErrorCode.RESPONSE_ERROR, (_c = 'invalid request ' + response.msg) !== null && _c !== void 0 ? _c : '');
            case types_1.RetCode.UNMATCHED_PRINTER_USER_RELATION:
                throw (0, business_types_1.apiError)(business_types_1.ApiErrorCode.RESPONSE_ERROR, (_d = 'insufficient permission ' + response.msg) !== null && _d !== void 0 ? _d : '');
            case types_1.RetCode.WRONG_REQUEST_HEADER:
                throw (0, business_types_1.apiError)(business_types_1.ApiErrorCode.RESPONSE_ERROR, (_e = 'wrong request header ' + response.msg) !== null && _e !== void 0 ? _e : '');
            default:
                return;
        }
    };
    Client.prototype._sendRequest = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var axiosResponse, error_1, axiosErr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.post("".concat(config_1.BASE_URL).concat(config_1.PATH_PREFIX), request, { headers: { 'content-type': 'application/x-www-form-urlencoded' } })];
                    case 1:
                        axiosResponse = _a.sent();
                        return [2 /*return*/, axiosResponse.data];
                    case 2:
                        error_1 = _a.sent();
                        if (axios_1.default.isAxiosError(error_1)) {
                            console.error('error message: ', error_1.message);
                            axiosErr = error_1;
                            throw (0, business_types_1.apiError)(business_types_1.ApiErrorCode.NETWORK_ERROR, error_1.message);
                        }
                        else {
                            console.error('unexpected error: ', error_1);
                            throw (0, business_types_1.apiError)(business_types_1.ApiErrorCode.UNKNOWN, error_1 + '');
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return Client;
}());
exports.Client = Client;
