// param types
import { TaskPrintState } from './types';

type BindPrinterParam = {
    sn: string;
    model?: string;
    alias?: string;
};

export type BindPrintersParam = {
    bindPrinterParams: BindPrinterParam[];
};

export type PrintParam = {
    sn: string;
    content: string;
    times?: number;
    expired?: number;
};

export type UnbindPrintersParam = {
    snList: string[];
};

export type PrinterStatusParam = {
    snList: string[];
};

export type TaskStatusParam = {
    taskId: string;
}

// result types

export type PrinterBindResult = {
    sn: string;
    model: string;
    alias?: string;
};

export type FailedPrinterBindResult = PrinterBindResult & {failureReason: string};

export type BindPrintersResult = {
    successfullyBindedPrinters: PrinterBindResult[];
    failedBindedPrinters: FailedPrinterBindResult[];
};

export type PrinterUnbindResult = {
    sn: string;
};

export type FailedPrinterUnbindResult = PrinterUnbindResult & {failureReason: string};

export type UnbindPrinterResult = {
    successfullyUnBindedPrinters: PrinterUnbindResult[];
    failedUnBindedPrinters: FailedPrinterUnbindResult[];   
};

export type Task = {
    id: string;
    printerSn: string;
    state: TaskPrintState;
    createdAt: Date;
    expiredAt?: Date;
};

export type QueryTasksResult = {
    tasks: Task[],
    nextReferenceTime?: Date;
};

export enum ApiErrorCode {
    CLIENT_INVALID_ARGUMENT = -1,
    NETWORK_ERROR = -2,
    UNKNOWN = -3,
    RESPONSE_ERROR = 1,
};

export type ApiError = {
    code: ApiErrorCode;
    message: string;
};

export const apiError = (code: ApiErrorCode, message: string): ApiError => {
    return {
        code,
        message
    };
};
